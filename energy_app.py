import streamlit as st
import pandas as pd
import numpy as np
from io import BytesIO

# ---------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------
def generate_sample_df() -> pd.DataFrame:
    """–°–æ–∑–¥–∞—ë—Ç –ø—Å–µ–≤–¥–æ—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –Ω–∞ —Å—É—Ç–∫–∏ (24 —á)."""
    np.random.seed(42)
    hours = list(range(24))
    consumption = [
        np.random.uniform(1.5, 2.5) if h < 6 or h > 22        # –Ω–æ—á—å
        else np.random.uniform(3.0, 4.5) if 6 <= h < 17       # —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
        else np.random.uniform(6.0, 8.5)                      # –≤–µ—á–µ—Ä–Ω–∏–π –ø–∏–∫
        for h in hours
    ]
    return pd.DataFrame({"–ß–∞—Å": hours, "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)": consumption})


def load_file(file) -> pd.DataFrame:
    """–ß–∏—Ç–∞–µ—Ç CSV –∏–ª–∏ Excel, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame."""
    if file.name.endswith(".csv"):
        return pd.read_csv(file)
    return pd.read_excel(file)
# ------------------------------------------------


st.set_page_config(page_title="–≠–Ω–µ—Ä–≥–æ-MVP", page_icon="üîã", layout="centered")
st.title("üîã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∏ —Ä–∞—Å—á—ë—Ç —ç–∫–æ–Ω–æ–º–∏–∏")

uploaded = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ Excel —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ ¬´–ß–∞—Å¬ª –∏ ¬´–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)¬ª",
    type=["csv", "xlsx"],
)

# ---- –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ: —Ñ–∞–π–ª –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ----
if uploaded is None:
    st.info("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω. –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    if not st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"):
        st.stop()                                # –∂–¥—ë–º –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    df = generate_sample_df()
else:
    try:
        df = load_file(uploaded)
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}")
        st.stop()

# ---- –≤–∞–ª–∏–¥–∞—Ü–∏—è ----
required_cols = {"–ß–∞—Å", "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)"}
if not required_cols.issubset(df.columns):
    st.error(f"–í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {', '.join(required_cols)}")
    st.stop()

# ---- –∞–Ω–∞–ª–∏–∑ ----
THRESHOLD = 6.0                                 # –∫–í—Ç¬∑—á ‚Äî –ø–æ—Ä–æ–≥ –ø–∏–∫–∞
df["–ü–∏–∫?"] = df["–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)"] > THRESHOLD
df["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"] = np.where(
    df["–ü–∏–∫?"], "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –Ω–æ—á—å", ""
)

# ---- –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ----
st.subheader("üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
st.dataframe(df, use_container_width=True)

st.subheader("–ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∑–∞ —Å—É—Ç–∫–∏")
st.line_chart(df.set_index("–ß–∞—Å")["–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)"])

st.subheader("‚è∞ –ß–∞—Å—ã –ø–∏–∫–æ–≤—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫ (> 6 –∫–í—Ç¬∑—á)")
peaks = df.loc[df["–ü–∏–∫?"], "–ß–∞—Å"].tolist()
if peaks:
    st.write(peaks)
    st.write(
        "–°–æ–≤–µ—Ç: –ø–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ —Ä–∞–±–æ—Ç—É –º–æ—â–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–µ–ø–∏–∫–æ–≤–æ–µ –≤—Ä–µ–º—è "
        "(–Ω–æ—á—å –∏–ª–∏ —Ä–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ)."
    )
else:
    st.write("–ü–∏–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ üéâ")

# ---- –±–ª–æ–∫ —Ä–∞—Å—á—ë—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏ ----
st.subheader("üí∏ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è")
tarif = st.number_input(
    "–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ, ‚ÇΩ –∑–∞ –∫–í—Ç¬∑—á",
    min_value=0.0,
    value=6.5,
    step=0.1,
)

if tarif > 0:
    total_kwh = df["–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)"].sum()
    total_cost = total_kwh * tarif

    night_tarif = tarif * 0.8                     # —É—Å–ª–æ–≤–Ω—ã–π –Ω–æ—á–Ω–æ–π —Ç–∞—Ä–∏—Ñ (-20 %)
    peak_kwh = df.loc[df["–ü–∏–∫?"], "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)"].sum()
    optimized_cost = total_cost - peak_kwh * tarif + peak_kwh * night_tarif

    economy = total_cost - optimized_cost
    percent = economy / total_cost * 100 if total_cost else 0

    col1, col2 = st.columns(2)
    col1.metric("–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å, ‚ÇΩ", f"{total_cost:,.2f}")
    col2.metric(
        "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, ‚ÇΩ",
        f"{optimized_cost:,.2f}",
        delta=f"-{economy:,.2f}",
    )
    st.success(f"üí∞ –≠–∫–æ–Ω–æ–º–∏—è: **{economy:,.2f} ‚ÇΩ ({percent:.1f} %)**")

    if percent > 10:
        st.info(
            "üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ / –ò–ë–ü –∏–ª–∏ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ "
            "–≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è."
        )

# ---- –≤—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ----
with st.expander("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"):
    buf = BytesIO()
    df.to_excel(buf, index=False)
    st.download_button(
        "–°–∫–∞—á–∞—Ç—å Excel",
        data=buf.getvalue(),
        file_name="energy_analysis.xlsx",
        mime=(
            "application/vnd.openxmlformats-officedocument."
            "spreadsheetml.sheet"
        ),
    )
