import streamlit as st
import pandas as pd
import numpy as np
from io import BytesIO

# --------------------------- –ù–ê–°–¢–†–û–ô–ö–ò –°–¢–†–ê–ù–ò–¶–´ ---------------------------
st.set_page_config(
    page_title="Energy Monitor ‚Äî –≠–∫–æ–Ω–æ–º–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞",
    page_icon="üîã",
    layout="centered"
)

# --------------------------- –®–ê–ü–ö–ê –ò –û–ü–ò–°–ê–ù–ò–ï ---------------------------
st.markdown("""
# üîã **Energy Monitor**
### –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∏ —Ä–∞—Å—á—ë—Ç —ç–∫–æ–Ω–æ–º–∏–∏ –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞

üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–ª–∏ Excel  
üìâ –ü–æ–ª—É—á–∏—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é, –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏  
üí∏ –£–∑–Ω–∞–π—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å
""")

# --------------------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---------------------------
def generate_sample_df() -> pd.DataFrame:
    np.random.seed(42)
    hours = list(range(24))
    consumption = [
        np.random.uniform(1.5, 2.5) if h < 6 or h > 22
        else np.random.uniform(3.0, 4.5) if 6 <= h < 17
        else np.random.uniform(6.0, 8.5)
        for h in hours
    ]
    return pd.DataFrame({"–ß–∞—Å": hours, "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)": consumption})


def load_file(file) -> pd.DataFrame:
    if file.name.endswith(".csv"):
        return pd.read_csv(file)
    return pd.read_excel(file)

# --------------------------- –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ---------------------------
uploaded = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ Excel —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ ¬´–ß–∞—Å¬ª –∏ ¬´–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)¬ª",
    type=["csv", "xlsx"],
)

if uploaded is None:
    st.info("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω. –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    if not st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"):
        st.stop()
    df = generate_sample_df()
else:
    try:
        df = load_file(uploaded)
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}")
        st.stop()

# --------------------------- –í–ê–õ–ò–î–ê–¶–ò–Ø ---------------------------
required_cols = {"–ß–∞—Å", "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)"}
if not required_cols.issubset(df.columns):
    st.error(f"–í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {', '.join(required_cols)}")
    st.stop()

# --------------------------- –ê–ù–ê–õ–ò–ó ---------------------------
THRESHOLD = 6.0
df["–ü–∏–∫?"] = df["–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)"] > THRESHOLD
df["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"] = np.where(df["–ü–∏–∫?"], "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –Ω–æ—á—å", "")

# --------------------------- –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø ---------------------------
st.subheader("üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
st.dataframe(df, use_container_width=True)

st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∑–∞ —Å—É—Ç–∫–∏")
st.line_chart(df.set_index("–ß–∞—Å")["–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)"])

st.subheader("‚è∞ –ß–∞—Å—ã –ø–∏–∫–æ–≤—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫ (> 6 –∫–í—Ç¬∑—á)")
peaks = df.loc[df["–ü–∏–∫?"], "–ß–∞—Å"].tolist()
if peaks:
    st.write(peaks)
    st.write("üîå –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ä–∞–±–æ—Ç—É –º–æ—â–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–æ—á–Ω—ã–µ –∏–ª–∏ —É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã.")
else:
    st.write("‚úÖ –ü–∏–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ.")

# --------------------------- –≠–ö–û–ù–û–ú–ò–Ø ---------------------------
st.subheader("üí∏ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è")
tarif = st.number_input(
    "–í–≤–µ–¥–∏—Ç–µ —Ç–∞—Ä–∏—Ñ (‚ÇΩ –∑–∞ 1 –∫–í—Ç¬∑—á):", min_value=0.0, value=6.5, step=0.1)

if tarif > 0:
    total_kwh = df["–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)"].sum()
    total_cost = total_kwh * tarif
    night_tarif = tarif * 0.8
    peak_kwh = df.loc[df["–ü–∏–∫?"], "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–∫–í—Ç¬∑—á)"].sum()
    optimized_cost = total_cost - peak_kwh * tarif + peak_kwh * night_tarif
    economy = total_cost - optimized_cost
    percent = (economy / total_cost * 100) if total_cost > 0 else 0

    col1, col2 = st.columns(2)
    col1.metric("–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{total_cost:,.2f} ‚ÇΩ")
    col2.metric("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", f"{optimized_cost:,.2f} ‚ÇΩ", delta=f"-{economy:,.2f} ‚ÇΩ")

    st.success(f"üí∞ –í—ã –º–æ–∂–µ—Ç–µ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å: **{economy:,.2f} ‚ÇΩ ({percent:.1f}%)**")

    if percent > 10:
        st.info("üìå –°–æ–≤–µ—Ç: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–∞–π–º–µ—Ä—ã –∏–ª–∏ –ò–ë–ü, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω–∏–∂–∞—Ç—å –ø–∏–∫–æ–≤—É—é –Ω–∞–≥—Ä—É–∑–∫—É.")

# --------------------------- –°–ö–ê–ß–ò–í–ê–ù–ò–ï ---------------------------
with st.expander("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"):
    buf = BytesIO()
    df.to_excel(buf, index=False)
    st.download_button(
        "–°–∫–∞—á–∞—Ç—å Excel",
        data=buf.getvalue(),
        file_name="energy_analysis.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
